/** Cache simulator using tracing data and a family of eviction policy options. */
import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin:'application'

mainClassName = 'com.github.benmanes.caffeine.cache.simulator.Simulator'

dependencies {
  compile project(':caffeine')

  compile libraries.xz
  compile libraries.ohc
  compile libraries.akka
  compile libraries.ycsb
  compile libraries.guava
  compile libraries.stream
  compile libraries.tcache
  compile libraries.cache2k
  compile libraries.ehcache3
  compile libraries.fastutil
  compile libraries.slf4jNop
  compile libraries.collision
  compile libraries.fastfilter
  compile libraries.flipTables
  compile libraries.jcommander
  compile libraries.expiringMap
  compile libraries.commonsLang3
  compile libraries.commonsMath3
  compile libraries.elasticSearch
  compile libraries.commonsCompress
  compile libraries.univocityParsers

  testCompile testLibraries.testng
}

test {
  useTestNG()
}

// JMH zip archive overlaps with the application's
if (!(gradle.startParameter.taskNames ==~ /.*uploadArchives.*/)) {
  apply from: "${rootDir}/gradle/jmh.gradle"

  jmh {
    benchmarkMode = ['avgt']
    warmupIterations = 1
    iterations = 3
  }
}

coverity {
  skip = true
}

sonarqube {
  skipProject = true
}

jar.manifest {
  attributes 'Bundle-SymbolicName': 'com.github.benmanes.caffeine.simulator'
  attributes 'Automatic-Module-Name': 'com.github.benmanes.caffeine.simulator'
}

tasks.withType(JavaCompile) {
  options.errorprone.nullaway {
    severity = CheckSeverity.OFF
  }
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  // https://github.com/akka/akka/issues/21165
  enabled = !JavaVersion.current().isJava9Compatible()
}

run {
  systemProperties System.properties.findAll {
    it.getKey().startsWith('akka') || it.getKey().startsWith('caffeine')
  }
}

task rewrite(type: JavaExec) {
  main = 'com.github.benmanes.caffeine.cache.simulator.parser.rewrite.Rewriter'
  classpath = sourceSets.main.runtimeClasspath

  def arguments = ['inputFiles', 'outputFile', 'outputFormat']
  for (def argument : arguments) {
    if (project.hasProperty(argument)) {
      args "--${argument}", project.property(argument)
    }
  }
  if (args.isEmpty()) {
    args '--help'
  }
}
